{"version":3,"sources":["components/day-card/DayCard.component.jsx","components/home/Home.component.jsx","components/favorites/Favorites.component.jsx","components/header/Header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["DayCard","day","className","dayName","temp","description","Home","dropdownDiv","currentCity","getForecast","favoritCity","apiKey","fiveDays","getCurrentCity","addOrRemoveItem","useState","searchQuery","setSearchQuery","dropdown","setDropdown","DefaultSearch","chooseCity","e","target","id","name","useEffect","length","fetch","then","response","json","citys","city","i","LocalizedName","Key","country","Country","push","catch","error","console","alert","map","key","href","onClick","toLowerCase","addOrRemoveButten","find","favorit","type","onChange","value","match","placeholder","Favorites","favorites","linkToHome","el","to","Header","App","setFavorites","setFavoritCity","setFiveDays","setCurrentCity","discreption","icon","WeatherIcon","Temperature","Metric","Value","d","Date","weekday","Array","cityName","getDay","Math","round","toCelsius","f","path","index","findIndex","tempCitys","splice","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.360ff8fc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './dayCard.styles.css'\r\n\r\nexport default function DayCard({ day }) {\r\n    return (\r\n        <div className='card-container'>\r\n            <h4>{day.dayName}</h4>\r\n            <span>{`temp: ${day.temp}`}</span><br />\r\n            <span>{day.description}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport './home.styles.css'\r\nimport DayCard from '../day-card/DayCard.component';\r\n\r\nexport default function Home({\r\n    currentCity,\r\n    getForecast,\r\n    favoritCity,\r\n    apiKey,\r\n    fiveDays,\r\n    getCurrentCity,\r\n    addOrRemoveItem\r\n}) {\r\n    const [searchQuery, setSearchQuery] = useState()\r\n    const [dropdown, setDropdown] = useState([])\r\n    const DefaultSearch = { id: '215854', name: 'Tel Aviv' }\r\n\r\n\r\n\r\n\r\n    const hendleCity = (e) => {\r\n        let letters = /^[A-Za-z ]+$/;\r\n        if (e.target.value.match(letters)) {\r\n            setSearchQuery(e.target.value)\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //פונקצית השלמה אוטומטית לחיפוש עיר\r\n    //הפונקציה מופעלת בעת שינוי באינפוט החיפוש ושולחת לשרת את הערך הנוכחי\r\n    //הפונקציה אוספת מהתשובה את שמות הערים ואת המספר המזהה שלהם ומעדכנת בהתאם מערך\r\n    //מערך אשר יוצג תחת האינפוט באלמנט שיציג בכל שינוי באינפוט את תוצאות החיפוש\r\n    //במידה ויש בעיה בתקשורת עם השרת הפונקציה יודעת לקלבת שגיאות\r\n    const getAutoComplete = () => {\r\n        if (searchQuery === '') {\r\n            return\r\n        }\r\n        fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${searchQuery}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                let citys = [];\r\n                let city = {};\r\n                for (let i = 0; i < response.length; i++) {\r\n                    city = {\r\n                        name: response[i].LocalizedName,\r\n                        id: response[i].Key,\r\n                        country: response[i].Country.LocalizedName\r\n                    }\r\n                    citys.push(city)\r\n                }\r\n                setDropdown(citys)\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                alert('error!  Something wrong...')\r\n            })\r\n    }\r\n\r\n\r\n    //פונקציה אשר מופעלת באופן דיפולטיבי בעת כניסה ראשונה לאתר\r\n    //מפעילה 2 פונקציות המבקשות מהשרת פרטי מזג אוויר \r\n    //פונקציה אחת מביאה פרטים נוכחיים\r\n    //פונקציה שנייה מביאה פרטים לחמישה ימים הבאים\r\n    //להפעלת הפונקציה יש תנאי שבעזרתם אני מוודא שאכן זו הפעם הראשונה שמשתמש נכנס\r\n    const defaultFunction = () => {\r\n        if (favoritCity.length > 0) {\r\n            return\r\n        }\r\n        getCurrentCity(DefaultSearch.id, DefaultSearch.name)\r\n        getForecast(DefaultSearch.id, DefaultSearch.name)\r\n    }\r\n\r\n    //פונקציה לבחירת עיר מתוך הצעות החיפוש עבור פרטי מזג אוויר\r\n    //בנוסף - הפונקציה מאפסת את האלמנט אשר מציג את תוצאות החיפוש\r\n    const chooseCity = (e) => {\r\n        getCurrentCity(e.target.id, e.target.name)\r\n        getForecast(e.target.id, e.target.name)\r\n        setDropdown([])\r\n    }\r\n\r\n\r\n\r\n    useEffect(defaultFunction, [])//הפעלה דיפולטיבית לקבלת תוצאות עבור תל אביב\r\n    useEffect(getAutoComplete, [searchQuery])//האזנה לשינוי בשדה החיפוש כדי להפעיל את פונקצית השלמת מילות החיפוש\r\n\r\n    let dropdownDiv;\r\n    if (dropdown.length) {\r\n        dropdownDiv = <div>\r\n            {dropdown.map(city => (\r\n                <div key={city.id}>\r\n                    <a href='#' className='a' onClick={chooseCity} id={city.id} name={city.name} >\r\n                        {city.name}({city.country.toLowerCase()})\r\n                         </a>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    }\r\n\r\n    let addOrRemoveButten = 'Add to favorites'\r\n    if (favoritCity) {\r\n        if (favoritCity.find(favorit => favorit === currentCity.name)) {\r\n            addOrRemoveButten = 'Remove from favorites '\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1>WEATHER APP</h1>\r\n            <div>\r\n                <div className='button-container'>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={hendleCity}\r\n                        placeholder='Search...'\r\n                    />\r\n                    {dropdownDiv}\r\n                </div>\r\n            </div>\r\n            <div>{currentCity ?\r\n                <div>\r\n                    <h2>{currentCity.name}</h2>\r\n                    <h5>{`${currentCity.temp} C`}</h5>\r\n                    <button className='add-button' onClick={addOrRemoveItem}>{addOrRemoveButten}</button>\r\n\r\n                </div>\r\n                : null}\r\n            </div>\r\n\r\n\r\n            <div >\r\n                {fiveDays ?\r\n                    <div className='card-list'>{fiveDays.map(day => {\r\n                        return <DayCard day={day} key={day.key} />\r\n                    })}</div> : null}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './favorites.styles.css'\r\n\r\n\r\nexport default function Favorites({ favorites, linkToHome }) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Favorites</h2>\r\n\r\n            {favorites.map(el => {\r\n                return <Link to=\"/\" className='link' onClick={() => { linkToHome(el.id, el.name) }}\r\n                key={el.id}> <div className='card' >\r\n\r\n                <h3>{el.name}</h3>\r\n                <span>{`${el.temp} C`}</span><br />\r\n                <span>{el.description}</span>\r\n                {/* <button onClick={() => { linkToHome(el.id, el.cityName) }}>\r\n                    Forecast for the next five days</button> */}\r\n\r\n            </div></Link>\r\n                // return <div className='card' key={el.cityName}>\r\n\r\n                //     <h3>{el.cityName}</h3>\r\n                //     <span>{`${el.temp} C`}</span><br />\r\n                //     <span>{el.description}</span>\r\n                //     <Link to=\"/\" > <button onClick={() => { linkToHome(el.id, el.cityName) }}>Forecast for the next five days</button></Link>\r\n\r\n                // </div>\r\n            })}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './heder.styles.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className='navbar'>\r\n            <nav> <Link to=\"/\">Home</Link></nav>\r\n            <nav><Link to=\"/favorites\">Favorites</Link></nav>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport Home from './components/home/Home.component';\r\nimport Favoritess from './components/favorites/Favorites.component';\r\nimport './App.css';\r\nimport Header from './components/header/Header.component';\r\n\r\nfunction App() {\r\n\r\n    const apiKey = 'QPLWLUMvzwLkfk9LzC2r3k8dkZ4g96oh'\r\n\r\n    const [favorites, setFavorites] = useState([]) ///מכיל את פרטי הערים המועדפות\r\n    const [favoritCity, setFavoritCity] = useState([]) ///מכיל רק  את שמות הערים המועדפות\r\n    const [fiveDays, setFiveDays] = useState() ///מכיל את פרטי מזג האוויר לחמישה ימים עבור העיר הנבחרת על ידי המשתמש במסך המועדפים. מערך זה עובר למסך הבית להצגה\r\n    const [currentCity, setCurrentCity] = useState() ///סטייט המכיל תשובה מקריאה לשרת עבור פרטי מזג אוויר נוכחיים עבןר עיר\r\n\r\n\r\n    //פונקציה שמבקשת מהשרת פרטי מזג אוויר נוכחיים עבור עיר\r\n    const getCurrentCity = (id, name) => {\r\n        fetch(`http://dataservice.accuweather.com/currentconditions/v1/${id}?apikey=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                setCurrentCity({\r\n                    discreption: response[0]['WeatherText'],\r\n                    name: name,\r\n                    id: id,\r\n                    icon: response[0].WeatherIcon,\r\n                    temp: response[0].Temperature.Metric.Value\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                alert('error!  Something wrong with calling a server')\r\n            })\r\n    }\r\n\r\n\r\n    ///מערך שמכיל את שמות ימות השבוע בו נשמתמש בעת עדכון מערך \"חמישה ימים\" שלמעלה\r\n    const d = new Date();\r\n    const weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    weekday[7] = \"Sunday\";\r\n    weekday[8] = \"Monday\";\r\n    weekday[9] = \"Tuesday\";\r\n    weekday[10] = \"Wednesday\";\r\n\r\n    //פונקציה הקוראת לשרת חיצוני לקבלת פרטי מזג אוויר לפי מספר מזהה של עיר ספציפית\r\n    //הפונקציב מעדכנת את מערך 5 ימים\r\n    //הפונקציה יודעת לקבל שגיאות במידה והתקשורת עם השרת לא הצליחה\r\n    const getForecast = (id, name) => {\r\n\r\n        fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${id}?apikey=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                setFiveDays([{\r\n                        cityName: name,\r\n                        id: id,\r\n                        dayName: weekday[d.getDay()],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][0]['Temperature']['Maximum']['Value']])),\r\n                        description: response['DailyForecasts'][0]['Day']['IconPhrase'],\r\n                        icon: response['DailyForecasts'][0]['Day']['Icon'],\r\n                        key: 0\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 1],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][1]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][2]['Day']['IconPhrase']],\r\n                        key: 1\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 2],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][2]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][2]['Day']['IconPhrase']],\r\n                        key: 2\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 3],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][3]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][3]['Day']['IconPhrase']],\r\n                        key: 3\r\n                    },\r\n                    {\r\n                        dayName: weekday[d.getDay() + 4],\r\n                        temp: Math.round(toCelsius([response['DailyForecasts'][4]['Temperature']['Maximum']['Value']])),\r\n                        description: [response['DailyForecasts'][4]['Day']['IconPhrase']],\r\n                        key: 4\r\n                    },\r\n                ])\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                alert('error!  Something wrong with calling a server, please choose a city')\r\n            })\r\n    }\r\n\r\n    //convert F to c\r\n    const toCelsius = (f) => {\r\n        return (5 / 9) * (f - 32)\r\n    }\r\n\r\n    //פונקציה להוספת או הסרת עיר ופרטי מזג אוויר למסף המועדפים\r\n    //מקבלת עיר ופרטי מזג אוויר ליום הנוכחי\r\n    //מעדכת את שני המערכים בסטייסט\r\n    const addOrRemoveItem = () => {\r\n        let index = favoritCity.findIndex(favorit => favorit === fiveDays[0].cityName)\r\n        if (index !== -1) {\r\n            let temp = [...favorites]\r\n            let tempCitys = [...favoritCity]\r\n            temp.splice(index, 1)\r\n            tempCitys.splice(index, 1)\r\n            setFavorites(temp)\r\n            setFavoritCity(tempCitys)\r\n            return\r\n        }\r\n        setFavorites([...favorites, currentCity])\r\n        setFavoritCity([...favoritCity, fiveDays[0].cityName])\r\n    }\r\n\r\n\r\n\r\n    //פונקציה שמופעלת בעת לחיצה על עיר במסך המועדפים\r\n    //מפעילה את הפונקציה גטפורקאסט \r\n    //לקבלת פרטי מזג האוויר לחמישה ימים ועדכון מסך הבית\r\n    //כך שהמשתמש מקבל את מסך הבית עם פרטי העיר הנבחרת\r\n    const linkToHome = (id, name) => {\r\n        getForecast(id, name)\r\n        getCurrentCity(id, name)\r\n    }\r\n\r\n\r\n    //לא כל כך הצלחתי להבין מה קרה פה\r\n    //היה עדכון בויזואל סטודיו קוד ומאז לא הצלחתי לסדר את הקוד\r\n    //הוא עובד! אבל אני לא הצלחתי לסדר את זה עד שעת ההגשה\r\n    return (\r\n\r\n\r\n        <\r\n        div className = \"App\" >\r\n        <\r\n        Router >\r\n\r\n        <\r\n        div >\r\n        <\r\n        Header / >\r\n        <\r\n        Switch >\r\n        <\r\n        Route path = \"/Favorites\" >\r\n        <\r\n        Favoritess favorites = { favorites }\r\n        apiKey = { apiKey }\r\n        // remove = { remove }\r\n        linkToHome = { linkToHome }\r\n        getForecast = { getForecast }\r\n        // emove = { remove }\r\n        /> < /\r\n        Route > <\r\n        Route path = \"/\" >\r\n        <\r\n        Home getForecast = { getForecast }\r\n        favoritCity = { favoritCity }\r\n        apiKey = { apiKey }\r\n        // remove = { remove }\r\n        fiveDays = { fiveDays }\r\n        getCurrentCity = { getCurrentCity }\r\n        currentCity = { currentCity }\r\n        addOrRemoveItem = { addOrRemoveItem }\r\n        /> < /\r\n        Route > <\r\n        /Switch> < /\r\n        div > <\r\n        /Router> < /\r\n        div >\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <\n    React.StrictMode >\n    <\n    App / >\n    <\n    /React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}